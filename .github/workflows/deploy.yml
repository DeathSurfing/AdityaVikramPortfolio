name: üöÄ Deploy Portfolio

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_rebuild:
        description: 'Force rebuild Docker images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_PROXY: ${{ github.repository }}-proxy

jobs:
  # ==============================================================================
  # BUILD & TEST PHASE
  # ==============================================================================
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: üì¶ Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: üîç Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: üèóÔ∏è Test frontend build
        run: |
          cd frontend
          npm run build

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Python dependencies
        run: |
          cd ollama-proxy
          pip install -r requirements.txt

      - name: üîç Lint Python code
        run: |
          cd ollama-proxy
          python -m flake8 main.py --max-line-length=120 --ignore=E501,W503 || true

  # ==============================================================================
  # DOCKER BUILD PHASE
  # ==============================================================================
  build:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      proxy-image: ${{ steps.meta-proxy.outputs.tags }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      proxy-digest: ${{ steps.build-proxy.outputs.digest }}
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üìã Extract metadata for Proxy
        id: meta-proxy
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PROXY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and push Frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: üèóÔ∏è Build and push Proxy image
        id: build-proxy
        uses: docker/build-push-action@v5
        with:
          context: ./ollama-proxy
          file: ./ollama-proxy/Dockerfile
          push: true
          tags: ${{ steps.meta-proxy.outputs.tags }}
          labels: ${{ steps.meta-proxy.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==============================================================================
  # SECURITY SCANNING
  # ==============================================================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: üîç Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.frontend-image }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: üìä Upload Frontend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'

      - name: üîç Run Trivy vulnerability scanner (Proxy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.proxy-image }}
          format: 'sarif'
          output: 'proxy-trivy-results.sarif'

      - name: üìä Upload Proxy Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'proxy-trivy-results.sarif'

  # ==============================================================================
  # DEPLOYMENT PHASE
  # ==============================================================================
  deploy:
    name: üöÄ Deploy to Server
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: 
      name: production
      url: https://portfolio.adityavikram.dev
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üìã Create deployment artifacts
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy necessary files for deployment
          cp docker-compose.yml deployment/
          cp -r nginx deployment/
          cp scripts/docker-dev.sh deployment/
          
          # Create production docker-compose override
          cat > deployment/docker-compose.prod.yml << EOF
          services:
            frontend:
              image: ${{ needs.build.outputs.frontend-image }}
              build: {}
            
            ollama-proxy:
              image: ${{ needs.build.outputs.proxy-image }}
              build: {}
              environment:
                - OLLAMA_ENDPOINT=http://localhost:11434  # Your server's Ollama
                - OLLAMA_MODEL=gpt-oss:20b
          
            nginx:
              profiles: []  # Always start nginx in production
          EOF

      - name: üöÄ Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Set deployment variables
            export DEPLOY_DIR="/opt/portfolio"
            export BACKUP_DIR="/opt/portfolio-backups/$(date +%Y%m%d-%H%M%S)"
            
            # Create directories
            sudo mkdir -p $DEPLOY_DIR
            sudo mkdir -p $(dirname $BACKUP_DIR)
            
            # Backup existing deployment
            if [ -d "$DEPLOY_DIR" ] && [ "$(ls -A $DEPLOY_DIR)" ]; then
              echo "üì¶ Creating backup at $BACKUP_DIR"
              sudo cp -r $DEPLOY_DIR $BACKUP_DIR
            fi
            
            # Update system packages (optional, uncomment if needed)
            # sudo apt update && sudo apt upgrade -y
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "üîß Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Navigate to deployment directory
            cd $DEPLOY_DIR
            
            # Stop existing containers gracefully
            if [ -f docker-compose.yml ]; then
              echo "‚èπÔ∏è Stopping existing containers..."
              sudo docker-compose down --timeout 30 || true
            fi
            
            # Clean up old images (keep last 3 versions)
            echo "üßπ Cleaning up old Docker images..."
            sudo docker image prune -f
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: üì§ Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "deployment/*"
          target: "/opt/portfolio"
          strip_components: 1

      - name: ‚ñ∂Ô∏è Start services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /opt/portfolio
            
            # Make scripts executable
            sudo chmod +x docker-dev.sh
            
            # Pull latest images
            echo "üì• Pulling latest images..."
            sudo docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            
            # Start services
            echo "üöÄ Starting services..."
            sudo docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            echo "‚è≥ Waiting for services to be ready..."
            sleep 30
            
            # Check service health
            echo "üîç Checking service health..."
            
            # Check if frontend is responding
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Frontend is healthy"
            else
              echo "‚ùå Frontend health check failed"
              sudo docker-compose logs frontend
            fi
            
            # Check if proxy is responding
            if curl -f http://localhost:5950/health > /dev/null 2>&1; then
              echo "‚úÖ Proxy is healthy"
            else
              echo "‚ùå Proxy health check failed"
              sudo docker-compose logs ollama-proxy
            fi
            
            # Check if nginx is responding
            if curl -f http://localhost > /dev/null 2>&1; then
              echo "‚úÖ Nginx is healthy"
            else
              echo "‚ùå Nginx health check failed"
              sudo docker-compose logs nginx
            fi
            
            # Show running containers
            echo "üìä Running containers:"
            sudo docker-compose ps
            
            # Show resource usage
            echo "üíª Resource usage:"
            sudo docker stats --no-stream

  # ==============================================================================
  # NOTIFICATION PHASE
  # ==============================================================================
  notify:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: üì¢ Deployment Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "‚úÖ Portfolio deployed to: https://portfolio.adityavikram.dev"
          echo "üîó Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"

      - name: ‚ùå Deployment Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîó Commit: ${{ github.sha }}"
          echo "üë§ Attempted by: ${{ github.actor }}"
          echo "üîß Check the logs for more details"

  # ==============================================================================
  # CLEANUP PHASE
  # ==============================================================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: üßπ Clean up old deployments on server
        if: needs.deploy.result == 'success'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Keep only the last 5 backups
            echo "üßπ Cleaning up old backups..."
            cd /opt/portfolio-backups
            ls -1t | tail -n +6 | sudo xargs -r rm -rf
            
            # Clean up unused Docker images and volumes
            echo "üê≥ Cleaning up Docker resources..."
            sudo docker system prune -f --volumes
            
            echo "‚úÖ Cleanup completed"
