name: Deploy Ollama Proxy

on:
  push:
    branches: [ main, master ]
    paths:
      - 'ollama-proxy/**'
      - '.github/workflows/deploy-ollama-proxy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'ollama-proxy/**'
  workflow_dispatch:

env:
  OLLAMA_MODEL: gpt-oss:20b
  PYTHON_VERSION: '3.13'

jobs:
  lint-and-test:
    runs-on: self-hosted
    name: üîç Lint & Test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python environment
      run: |
        echo "üêç Setting up Python environment..."
        # Check for Python versions (prefer specific versions if available)
        if command -v python3.13 &> /dev/null; then
          echo "Using python3.13"
          PYTHON_CMD=python3.13
        elif command -v python3.12 &> /dev/null; then
          echo "Using python3.12"
          PYTHON_CMD=python3.12
        elif command -v python3.11 &> /dev/null; then
          echo "Using python3.11"
          PYTHON_CMD=python3.11
        elif command -v python &> /dev/null; then
          python_version=$(python --version 2>&1 | cut -d" " -f2 | cut -d"." -f1,2)
          echo "Found Python version: $python_version"
          PYTHON_CMD=python
        elif command -v python3 &> /dev/null; then
          python_version=$(python3 --version 2>&1 | cut -d" " -f2 | cut -d"." -f1,2)
          echo "Found Python version: $python_version"
          PYTHON_CMD=python3
        else
          echo "‚ùå Python not found"
          exit 1
        fi
        
        # Verify Python version is suitable
        $PYTHON_CMD --version
        echo "‚úÖ Python found: $PYTHON_CMD"
        echo "PYTHON_CMD=$PYTHON_CMD" >> $GITHUB_ENV

    - name: Create virtual environment
      working-directory: ./ollama-proxy
      run: |
        echo "üè≠ Creating virtual environment..."
        # Create virtual environment if it doesn't exist
        if [ ! -d ".venv" ]; then
          $PYTHON_CMD -m venv .venv
          echo "‚úÖ Virtual environment created"
        else
          echo "‚ÑπÔ∏è Virtual environment already exists"
        fi
        
        # Activate virtual environment and set up for subsequent steps
        source .venv/bin/activate
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "PATH=$(pwd)/.venv/bin:$PATH" >> $GITHUB_ENV
        echo "‚úÖ Virtual environment activated"

    - name: Install dependencies
      working-directory: ./ollama-proxy
      run: |
        echo "üì¶ Installing dependencies..."
        source .venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install black flake8 mypy bandit safety
        echo "‚úÖ Dependencies installed in virtual environment"

    - name: Code formatting check (Black)
      working-directory: ./ollama-proxy
      run: |
        echo "üé® Checking code formatting with Black..."
        if command -v black &> /dev/null; then
          black --check --diff main.py
        else
          echo "‚ö†Ô∏è Black not available, skipping format check"
        fi

    - name: Lint with flake8
      working-directory: ./ollama-proxy
      run: |
        echo "üîç Linting with flake8..."
        if command -v flake8 &> /dev/null; then
          flake8 main.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 main.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        else
          echo "‚ö†Ô∏è Flake8 not available, skipping lint check"
        fi

    - name: Type checking with mypy
      working-directory: ./ollama-proxy
      run: |
        echo "üìù Type checking with mypy..."
        if command -v mypy &> /dev/null; then
          mypy main.py --ignore-missing-imports || true
        else
          echo "‚ö†Ô∏è MyPy not available, skipping type check"
        fi

    - name: Security scan with bandit
      working-directory: ./ollama-proxy
      run: |
        echo "üõ°Ô∏è Security scanning with bandit..."
        if command -v bandit &> /dev/null; then
          bandit -r main.py -f json || true
        else
          echo "‚ö†Ô∏è Bandit not available, skipping security scan"
        fi

    - name: Check for known security vulnerabilities
      working-directory: ./ollama-proxy
      run: |
        echo "üö® Checking for known vulnerabilities..."
        if command -v safety &> /dev/null; then
          safety check --json || true
        else
          echo "‚ö†Ô∏è Safety not available, skipping vulnerability check"
        fi

    - name: Validate Docker configuration
      working-directory: ./ollama-proxy
      run: |
        echo "üê≥ Validating Docker configuration..."
        docker compose config
        hadolint Dockerfile || echo "‚ö†Ô∏è Hadolint not available, skipping Dockerfile lint"

  deploy:
    runs-on: self-hosted
    name: üöÄ Deploy to Runner
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check system requirements
      run: |
        echo "üîç Checking system requirements..."
        echo "Docker version: $(docker --version)"
        echo "Docker Compose version: $(docker compose version)"
        echo "Available disk space:"
        df -h

    - name: Check if Ollama is running
      run: |
        echo "üîç Checking Ollama status..."
        if curl -f http://localhost:11434/api/tags > /dev/null 2>&1; then
          echo "‚úÖ Ollama is running"
          echo "üìã Available models:"
          curl -s http://localhost:11434/api/tags | jq -r '.models[].name' || echo "Could not list models"
        else
          echo "‚ùå Ollama is not running. Please start Ollama on the runner."
          echo "   Command: ollama serve"
          exit 1
        fi

    - name: Check/Pull model
      run: |
        echo "üîç Checking if model ${{ env.OLLAMA_MODEL }} is available..."
        if ! curl -s http://localhost:11434/api/tags | jq -r '.models[].name' | grep -q "${{ env.OLLAMA_MODEL }}"; then
          echo "‚¨áÔ∏è Model ${{ env.OLLAMA_MODEL }} not found, pulling..."
          ollama pull ${{ env.OLLAMA_MODEL }}
          echo "‚úÖ Model pulled successfully"
        else
          echo "‚úÖ Model ${{ env.OLLAMA_MODEL }} is available"
        fi

    - name: Stop existing deployment
      working-directory: ./ollama-proxy
      run: |
        echo "üõë Stopping existing deployment..."
        docker compose down || true
        docker system prune -f || true

    - name: Deploy with Docker Compose
      working-directory: ./ollama-proxy
      run: |
        echo "üöÄ Deploying Ollama proxy with Docker Compose..."
        export OLLAMA_MODEL=${{ env.OLLAMA_MODEL }}
        docker compose up --build -d

    - name: Wait for service to be ready
      run: |
        echo "‚è≥ Waiting for service to be ready..."
        timeout=120
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          if curl -f http://localhost:5950/health > /dev/null 2>&1; then
            echo "‚úÖ Service is ready!"
            break
          fi
          echo "   Waiting... ($elapsed/$timeout seconds)"
          sleep 10
          elapsed=$((elapsed + 10))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå Timeout waiting for service"
          echo "üìã Container logs:"
          docker compose -f ./ollama-proxy/docker-compose.yml logs
          exit 1
        fi

    - name: Comprehensive deployment test
      run: |
        echo "üß™ Running comprehensive tests..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        health_response=$(curl -s http://localhost:5950/health)
        echo "Health: $(echo $health_response | jq -r '.status')"
        
        # Test models endpoint
        echo "Testing models endpoint..."
        models_response=$(curl -s http://localhost:5950/api/models)
        model_count=$(echo $models_response | jq '.models | length')
        echo "Available models: $model_count"
        
        # Test chat endpoint
        echo "Testing chat endpoint..."
        chat_response=$(curl -s -X POST http://localhost:5950/api/chat \
          -H "Content-Type: application/json" \
          -d '{"message": "Hello! Just testing the deployment."}' \
          --max-time 30)
        
        if echo "$chat_response" | jq -e '.message' > /dev/null 2>&1; then
          echo "‚úÖ Chat endpoint working!"
          response_length=$(echo "$chat_response" | jq -r '.message' | wc -c)
          echo "   Response length: $response_length characters"
        else
          echo "‚ùå Chat endpoint failed"
          echo "   Response: $chat_response"
          exit 1
        fi
        
        # Test CORS headers
        echo "Testing CORS headers..."
        cors_response=$(curl -s -I -H "Origin: https://portfolio.adityavikram.dev" \
          http://localhost:5950/health)
        if echo "$cors_response" | grep -q "Access-Control-Allow-Origin"; then
          echo "‚úÖ CORS headers present"
        else
          echo "‚ö†Ô∏è CORS headers not found (might be expected for non-preflight requests)"
        fi

    - name: Container health check
      working-directory: ./ollama-proxy
      run: |
        echo "üè• Checking container health..."
        container_status=$(docker compose ps --format json | jq -r '.[0].Health')
        echo "Container health: $container_status"
        
        if [ "$container_status" != "healthy" ] && [ "$container_status" != "null" ]; then
          echo "‚ö†Ô∏è Container not healthy, checking logs..."
          docker compose logs --tail 20
        fi

    - name: Clean up old images
      run: |
        echo "üßπ Cleaning up old Docker images..."
        docker image prune -f --filter "until=24h"

    - name: Deployment summary
      working-directory: ./ollama-proxy
      run: |
        echo "üìä Deployment Summary"
        echo "===================="
        echo "‚úÖ Ollama proxy deployed successfully"
        echo "ü§ñ Model: ${{ env.OLLAMA_MODEL }}"
        echo "üåê Health check: http://localhost:5950/health"
        echo "üí¨ Chat endpoint: http://localhost:5950/api/chat"
        echo "üîó Ready for Cloudflare tunnel routing"
        echo ""
        echo "üìã Container status:"
        docker compose ps
        echo ""
        echo "üìä System resources:"
        df -h | grep -E '(Filesystem|/dev/)' || true
        echo "Memory usage:"
        docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" || true
