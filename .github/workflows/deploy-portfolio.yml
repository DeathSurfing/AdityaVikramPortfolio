name: 🚀 Deploy Portfolio

permissions:
  contents: read

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - local
      force_rebuild:
        description: 'Force rebuild Docker images'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # ==============================================================================
  # TEST & LINT PHASE (GitHub-hosted runners)
  # ==============================================================================
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_deploy.outputs.should_deploy }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: 🏗️ Test frontend build
        run: |
          cd frontend
          npm run build

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          cd ollama-proxy
          pip install -r requirements.txt

      - name: 🔍 Lint Python code
        run: |
          cd ollama-proxy
          python -m flake8 main.py --max-line-length=120 --ignore=E501,W503 || true

      - name: ✅ Tests passed
        run: |
          echo "✅ All tests and linting passed!"
          echo "Frontend build size:"
          cd frontend && du -sh .next || echo "No .next directory found"

      - name: 🔍 Check if deployment should proceed
        id: check_deploy
        run: |
          # Deploy on main branch push or manual workflow dispatch
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]] || 
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment conditions met"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Skipping deployment (not main branch or manual trigger)"
          fi

  # ==============================================================================
  # BUILD PHASE (Self-hosted or production server)
  # ==============================================================================
  build:
    name: 🐳 Build Docker Images
    runs-on: self-hosted
    needs: test
    if: needs.test.outputs.should_deploy == 'true'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check Docker availability
        run: |
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker is not available on this runner"
            exit 1
          fi
          docker --version

      - name: 🐳 Set up Docker Buildx (optional)
        run: |
          if command -v docker-buildx &> /dev/null; then
            echo "✅ Docker Buildx available"
            docker buildx version
          else
            echo "ℹ️ Docker Buildx not available, using regular Docker build"
          fi

      - name: 🧹 Clean up old images (if force rebuild)
        if: github.event.inputs.force_rebuild == 'true'
        run: |
          echo "🧹 Force rebuild requested - cleaning up old images..."
          docker rmi portfolio-frontend:latest portfolio-proxy:latest 2>/dev/null || true
          docker image prune -f || true

      - name: 🏗️ Build Frontend image
        run: |
          echo "🏗️ Building Frontend Docker image..."
          cd frontend
          docker build \
            -t portfolio-frontend:latest \
            -t portfolio-frontend:${{ github.sha }} \
            -t portfolio-frontend:$(date +%Y%m%d-%H%M%S) \
            .

      - name: 🏗️ Build Proxy image
        run: |
          echo "🏗️ Building Proxy Docker image..."
          cd ollama-proxy
          docker build \
            -t portfolio-proxy:latest \
            -t portfolio-proxy:${{ github.sha }} \
            -t portfolio-proxy:$(date +%Y%m%d-%H%M%S) \
            .

      - name: 📋 Show built images
        run: |
          echo "✅ Successfully built images:"
          echo ""
          docker images | head -n1  # Header
          docker images | grep portfolio | head -10  # Show latest portfolio images
          echo ""
          
          # Show image sizes
          echo "📊 Image sizes:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep portfolio

      - name: 🧹 Clean up dangling images
        run: |
          echo "🧹 Cleaning up dangling images..."
          docker image prune -f || true
          
          # Optional: Clean up old tagged images (keep latest + last 5)
          echo "🧹 Cleaning up old tagged images (keeping latest + last 5)..."
          
          # Clean old frontend images
          OLD_FRONTEND=$(docker images portfolio-frontend --format "{{.Tag}}" | grep -v latest | tail -n +6)
          for tag in $OLD_FRONTEND; do
            echo "Removing old image: portfolio-frontend:$tag"
            docker rmi portfolio-frontend:$tag || true
          done
          
          # Clean old proxy images
          OLD_PROXY=$(docker images portfolio-proxy --format "{{.Tag}}" | grep -v latest | tail -n +6)
          for tag in $OLD_PROXY; do
            echo "Removing old image: portfolio-proxy:$tag"
            docker rmi portfolio-proxy:$tag || true
          done

  # ==============================================================================
  # DEPLOYMENT PHASE
  # ==============================================================================
  deploy:
    name: 🚀 Deploy Services
    runs-on: self-hosted
    needs: [test, build]
    if: needs.test.outputs.should_deploy == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: http://localhost:3000
    
    steps:
      - name: 🔄 Stop existing services
        run: |
          echo "🔄 Stopping existing services..."
          if [ -f docker-compose.yml ]; then
            docker-compose down --timeout 30 || true
          else
            echo "ℹ️ No docker-compose.yml found, skipping stop"
          fi

      - name: 🚀 Start new services
        run: |
          echo "🚀 Starting services with new images..."
          docker-compose up -d
          
          # Show started containers
          echo ""
          echo "📊 Started containers:"
          docker-compose ps

      - name: ⏳ Wait for services to initialize
        run: |
          echo "⏳ Waiting for services to initialize..."
          sleep 30
          
          # Show container status
          echo "📊 Container status after 30 seconds:"
          docker-compose ps

      - name: 🔍 Health checks
        run: |
          echo "🔍 Performing health checks..."
          
          # Function to check service health
          check_service() {
            local service_name="$1"
            local url="$2"
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts - Checking $service_name..."
              
              if curl -f "$url" > /dev/null 2>&1; then
                echo "✅ $service_name is healthy"
                return 0
              else
                echo "⚠️ $service_name not ready yet, waiting..."
                sleep 10
                ((attempt++))
              fi
            done
            
            echo "❌ $service_name health check failed after $max_attempts attempts"
            return 1
          }
          
          # Check services
          FRONTEND_HEALTHY=0
          PROXY_HEALTHY=0
          
          check_service "Frontend" "http://localhost:3000" && FRONTEND_HEALTHY=1
          check_service "Proxy" "http://localhost:5950/health" && PROXY_HEALTHY=1
          
          # Summary
          echo ""
          echo "🏥 Health Check Summary:"
          [ $FRONTEND_HEALTHY -eq 1 ] && echo "✅ Frontend: Healthy" || echo "❌ Frontend: Unhealthy"
          [ $PROXY_HEALTHY -eq 1 ] && echo "✅ Proxy: Healthy" || echo "❌ Proxy: Unhealthy"
          
          # Show logs if any service is unhealthy
          if [ $FRONTEND_HEALTHY -eq 0 ]; then
            echo ""
            echo "🔍 Frontend logs:"
            docker-compose logs --tail=20 frontend || true
          fi
          
          if [ $PROXY_HEALTHY -eq 0 ]; then
            echo ""
            echo "🔍 Proxy logs:"
            docker-compose logs --tail=20 ollama-proxy || true
          fi
          
          # Exit with error if critical services are unhealthy
          if [ $FRONTEND_HEALTHY -eq 0 ]; then
            echo "❌ Deployment failed - Frontend is not healthy"
            exit 1
          fi

      - name: 📊 Deployment summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "======================"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "🕐 Time: $(date)"
          echo "🌍 Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo ""
          echo "🌐 Services:"
          echo "- Frontend: http://localhost:3000"
          echo "- Proxy API: http://localhost:5950"
          echo "- Health Check: http://localhost:5950/health"
          echo ""
          echo "📊 Running containers:"
          docker-compose ps
          echo ""
          echo "💾 Docker images:"
          docker images | grep portfolio | head -5

  # ==============================================================================
  # NOTIFICATION PHASE
  # ==============================================================================
  notify:
    name: 📢 Notify Result
    runs-on: self-hosted
    needs: [test, build, deploy]
    if: always() && needs.test.outputs.should_deploy == 'true'
    
    steps:
      - name: 🎉 Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Portfolio deployment successful!"
          echo "✅ All services are running and healthy"
          echo "🔗 Frontend: http://localhost:3000"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 By: ${{ github.actor }}"

      - name: ❌ Failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Portfolio deployment failed!"
          echo "🔍 Check the logs above for details"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 By: ${{ github.actor }}"
          echo ""
          echo "🛠️ Troubleshooting tips:"
          echo "- Check container logs: docker-compose logs"
          echo "- Verify images exist: docker images | grep portfolio"
          echo "- Check service status: docker-compose ps"
