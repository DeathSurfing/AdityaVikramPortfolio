name: 🔧 Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      docker_tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        type: string
      services:
        description: 'Services to deploy (comma-separated: frontend,proxy,nginx or all)'
        required: true
        default: 'all'
        type: string
      skip_tests:
        description: 'Skip tests and deploy directly'
        required: false
        default: false
        type: boolean
      force_restart:
        description: 'Force restart all services'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_PROXY: ${{ github.repository }}-proxy

jobs:
  validate:
    name: 🔍 Validate Input
    runs-on: ubuntu-latest
    outputs:
      deploy_frontend: ${{ steps.check.outputs.deploy_frontend }}
      deploy_proxy: ${{ steps.check.outputs.deploy_proxy }}
      deploy_nginx: ${{ steps.check.outputs.deploy_nginx }}
      docker_tag: ${{ steps.check.outputs.docker_tag }}
    
    steps:
      - name: 🔍 Check deployment parameters
        id: check
        run: |
          # Parse services input
          SERVICES="${{ inputs.services }}"
          
          if [[ "$SERVICES" == "all" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_proxy=true" >> $GITHUB_OUTPUT
            echo "deploy_nginx=true" >> $GITHUB_OUTPUT
          else
            if [[ "$SERVICES" == *"frontend"* ]]; then
              echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$SERVICES" == *"proxy"* ]]; then
              echo "deploy_proxy=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_proxy=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$SERVICES" == *"nginx"* ]]; then
              echo "deploy_nginx=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_nginx=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Set docker tag
          if [[ -n "${{ inputs.docker_tag }}" ]]; then
            echo "docker_tag=${{ inputs.docker_tag }}" >> $GITHUB_OUTPUT
          else
            echo "docker_tag=latest" >> $GITHUB_OUTPUT
          fi
          
          # Log deployment plan
          echo "🎯 Deployment Plan:"
          echo "   Environment: ${{ inputs.environment }}"
          echo "   Services: $SERVICES"
          echo "   Docker Tag: $([ -n '${{ inputs.docker_tag }}' ] && echo '${{ inputs.docker_tag }}' || echo 'latest')"
          echo "   Skip Tests: ${{ inputs.skip_tests }}"
          echo "   Force Restart: ${{ inputs.force_restart }}"

  test:
    name: 🧪 Test (Optional)
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        if: needs.validate.outputs.deploy_frontend == 'true'
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install and test frontend
        if: needs.validate.outputs.deploy_frontend == 'true'
        run: |
          cd frontend
          npm ci
          npm run lint
          npm run build

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        if: needs.validate.outputs.deploy_proxy == 'true'
        with:
          python-version: '3.11'

      - name: 📦 Install and test proxy
        if: needs.validate.outputs.deploy_proxy == 'true'
        run: |
          cd ollama-proxy
          pip install -r requirements.txt
          python -c "import main; print('✅ Proxy imports successfully')"

  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment == 'production' && 'https://portfolio.adityavikram.dev' || format('https://{0}.portfolio.adityavikram.dev', inputs.environment) }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Prepare deployment configuration
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy base files
          cp docker-compose.yml deployment/
          cp -r nginx deployment/
          cp scripts/docker-dev.sh deployment/
          
          # Create environment-specific override
          cat > deployment/docker-compose.override.yml << EOF
          services:
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.validate.outputs.docker_tag }}
              build: {}
            
            ollama-proxy:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PROXY }}:${{ needs.validate.outputs.docker_tag }}
              build: {}
              environment:
                - OLLAMA_ENDPOINT=http://localhost:11434
                - OLLAMA_MODEL=gpt-oss:20b
          
            nginx:
              profiles: []  # Always start nginx
          EOF
          
          echo "📋 Deployment configuration created for ${{ inputs.environment }}"

      - name: 🚀 Execute deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Set deployment directory based on environment
            if [[ "${{ inputs.environment }}" == "production" ]]; then
              export DEPLOY_DIR="/opt/portfolio"
            else
              export DEPLOY_DIR="/opt/portfolio-${{ inputs.environment }}"
            fi
            
            export BACKUP_DIR="/opt/portfolio-backups/${{ inputs.environment }}-$(date +%Y%m%d-%H%M%S)"
            
            echo "🎯 Deploying to: $DEPLOY_DIR"
            
            # Create directories
            sudo mkdir -p $DEPLOY_DIR
            sudo mkdir -p $(dirname $BACKUP_DIR)
            
            # Backup existing deployment if exists
            if [ -d "$DEPLOY_DIR" ] && [ "$(ls -A $DEPLOY_DIR)" ]; then
              echo "📦 Creating backup at $BACKUP_DIR"
              sudo cp -r $DEPLOY_DIR $BACKUP_DIR
            fi
            
            # Navigate to deployment directory
            cd $DEPLOY_DIR
            
            # Handle force restart
            if [[ "${{ inputs.force_restart }}" == "true" ]] || [[ ! -f docker-compose.yml ]]; then
              echo "🔄 Force restart requested - stopping all services"
              sudo docker-compose down --remove-orphans --timeout 30 || true
            elif [[ "${{ needs.validate.outputs.deploy_frontend }}" == "true" ]] && [[ "${{ needs.validate.outputs.deploy_proxy }}" == "true" ]]; then
              echo "⏹️ Stopping services for update..."
              sudo docker-compose stop frontend ollama-proxy || true
            elif [[ "${{ needs.validate.outputs.deploy_frontend }}" == "true" ]]; then
              echo "⏹️ Stopping frontend..."
              sudo docker-compose stop frontend || true
            elif [[ "${{ needs.validate.outputs.deploy_proxy }}" == "true" ]]; then
              echo "⏹️ Stopping proxy..."
              sudo docker-compose stop ollama-proxy || true
            fi
            
            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 📤 Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "deployment/*"
          target: ${{ inputs.environment == 'production' && '/opt/portfolio' || format('/opt/portfolio-{0}', inputs.environment) }}
          strip_components: 1

      - name: ▶️ Start services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Set deployment directory
            if [[ "${{ inputs.environment }}" == "production" ]]; then
              export DEPLOY_DIR="/opt/portfolio"
              export PORT_OFFSET=0
            else
              export DEPLOY_DIR="/opt/portfolio-${{ inputs.environment }}"
              export PORT_OFFSET=100  # staging uses 3100, 5960, etc.
            fi
            
            cd $DEPLOY_DIR
            
            # Make scripts executable
            sudo chmod +x docker-dev.sh
            
            # Pull images for selected services
            echo "📥 Pulling images..."
            if [[ "${{ needs.validate.outputs.deploy_frontend }}" == "true" ]]; then
              sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.validate.outputs.docker_tag }}
            fi
            if [[ "${{ needs.validate.outputs.deploy_proxy }}" == "true" ]]; then
              sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PROXY }}:${{ needs.validate.outputs.docker_tag }}
            fi
            
            # Start services
            echo "🚀 Starting services..."
            sudo docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
            
            # Wait for services
            echo "⏳ Waiting for services to be ready..."
            sleep 20
            
            # Health checks
            echo "🔍 Performing health checks..."
            
            # Calculate ports for environment
            FRONTEND_PORT=$((3000 + PORT_OFFSET))
            PROXY_PORT=$((5950 + PORT_OFFSET))
            NGINX_PORT=$((80 + PORT_OFFSET))
            
            # Check services that were deployed
            if [[ "${{ needs.validate.outputs.deploy_frontend }}" == "true" ]]; then
              if curl -f http://localhost:$FRONTEND_PORT > /dev/null 2>&1; then
                echo "✅ Frontend is healthy on port $FRONTEND_PORT"
              else
                echo "❌ Frontend health check failed on port $FRONTEND_PORT"
                sudo docker-compose logs frontend
              fi
            fi
            
            if [[ "${{ needs.validate.outputs.deploy_proxy }}" == "true" ]]; then
              if curl -f http://localhost:$PROXY_PORT/health > /dev/null 2>&1; then
                echo "✅ Proxy is healthy on port $PROXY_PORT"
              else
                echo "❌ Proxy health check failed on port $PROXY_PORT"
                sudo docker-compose logs ollama-proxy
              fi
            fi
            
            if [[ "${{ needs.validate.outputs.deploy_nginx }}" == "true" ]]; then
              if curl -f http://localhost:$NGINX_PORT > /dev/null 2>&1; then
                echo "✅ Nginx is healthy on port $NGINX_PORT"
              else
                echo "❌ Nginx health check failed on port $NGINX_PORT"
                sudo docker-compose logs nginx
              fi
            fi
            
            # Final status
            echo "📊 Final container status:"
            sudo docker-compose ps
            
            echo "💻 Resource usage:"
            sudo docker stats --no-stream --format "table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.MemPerc}}"

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Manual deployment successful!"
          echo "🎯 Environment: ${{ inputs.environment }}"
          echo "🚀 Services: ${{ inputs.services }}"
          echo "🏷️ Tag: ${{ needs.validate.outputs.docker_tag }}"
          echo "👤 Deployed by: ${{ github.actor }}"

      - name: ❌ Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Manual deployment failed!"
          echo "🎯 Environment: ${{ inputs.environment }}"
          echo "🚀 Services: ${{ inputs.services }}"
          echo "🏷️ Tag: ${{ needs.validate.outputs.docker_tag }}"
          echo "👤 Attempted by: ${{ github.actor }}"
